/*
Паттерн Посетитель - это поведенческий паттерн проектирования,
который позволяет добавлять в программу новые операции, не изменяя классы объектов,
над которыми эти операции могут выполняться.
Паттерн Посетитель предлагает разместить новое поведение в отдельном классе,
вместо того чтобы множить его сразу в нескольких классах.
Объекты, с которыми должно было быть связано поведение, не будут выполнять его самостоятельно.
Вместо этого эти объекты будут передаваться в методы посетителя.

Плюсы:
- упрощает добавление операций, работающих со сложными структурами объектов;
- объединяет родственные операции в одном классе;
- посетитель может накапливать состояние при обходе структуры элементов.
Минусы:
- паттерн не оправдан, если иерархия элементов часто меняется;
- может привести к нарушению инкапсуляции элементов.
*/

package main

import "fmt"

// Visitor - описывает интерфейс посетителя.
type Visitor interface {
	VisitRectangle(*Rectangle)
}

// Rectangle - конкретный элемент.
// Описывает прямоугольник со сторонами a и b.
type Rectangle struct {
	a int
	b int
}

// A - возвращает значение стороны a.
func (r *Rectangle) A() int {
	return r.a
}

// B - возвращает значение стороны b.
func (r *Rectangle) B() int {
	return r.b
}

// Accept - метод принятия.
func (r *Rectangle) Accept(v Visitor) {
	v.VisitRectangle(r)
}

// AreaCalculator - конкретный посетитель.
type AreaCalculator struct {
	area int
}

// VisitRectangle - рассчитывает площадь прямоугольника.
func (a *AreaCalculator) VisitRectangle(r *Rectangle) {
	a.area = r.a * r.b
}

func main() {
	// Экземпляр конкретного элемента.
	rect := new(Rectangle)
	rect.a = 5
	rect.b = 8
	// Экземпляр посетителя.
	calc := new(AreaCalculator)
	// Выполнение метода посетителя.
	rect.Accept(calc)
	fmt.Println(calc.area)
	// Output:
	// 40
}
